/**
 * This file was automatically generated by `@sdutacm/onlinejudge3-api-sdk`.
 */

import * as Contract_Contest from '../../common/contracts/contest';

export class ApiContestModule<R> {
  constructor(private readonly apiRequest: any) {}

  /**
   * API getContestList.
   * @param req {Contract_Contest.IGetContestListReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IGetContestListResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getContestList(req: Contract_Contest.IGetContestListReq, options?: R): Promise<Contract_Contest.IGetContestListResp> {
    return this.apiRequest('getContestList', req, options);
  }

  /**
   * API getContestSession.
   * @param req {Contract_Contest.IGetContestSessionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IGetContestSessionResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getContestSession(req: Contract_Contest.IGetContestSessionReq, options?: R): Promise<Contract_Contest.IGetContestSessionResp> {
    return this.apiRequest('getContestSession', req, options);
  }

  /**
   * API requestContestSession.
   * @param req {Contract_Contest.IRequestContestSessionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IRequestContestSessionResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  requestContestSession(req: Contract_Contest.IRequestContestSessionReq, options?: R): Promise<Contract_Contest.IRequestContestSessionResp> {
    return this.apiRequest('requestContestSession', req, options);
  }

  /**
   * API logoutContest.
   * @param req {Contract_Contest.ILogoutContestReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  logoutContest(req: Contract_Contest.ILogoutContestReq, options?: R): Promise<void> {
    return this.apiRequest('logoutContest', req, options);
  }

  /**
   * API getContestDetail.
   * @param req {Contract_Contest.IGetContestDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IGetContestDetailResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getContestDetail(req: Contract_Contest.IGetContestDetailReq, options?: R): Promise<Contract_Contest.IGetContestDetailResp> {
    return this.apiRequest('getContestDetail', req, options);
  }

  /**
   * API createContest.
   * @param req {Contract_Contest.ICreateContestReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.ICreateContestResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  createContest(req: Contract_Contest.ICreateContestReq, options?: R): Promise<Contract_Contest.ICreateContestResp> {
    return this.apiRequest('createContest', req, options);
  }

  /**
   * API updateContestDetail.
   * @param req {Contract_Contest.IUpdateContestDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  updateContestDetail(req: Contract_Contest.IUpdateContestDetailReq, options?: R): Promise<void> {
    return this.apiRequest('updateContestDetail', req, options);
  }

  /**
   * API getContestProblems.
   * @param req {Contract_Contest.IGetContestProblemsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IGetContestProblemsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getContestProblems(req: Contract_Contest.IGetContestProblemsReq, options?: R): Promise<Contract_Contest.IGetContestProblemsResp> {
    return this.apiRequest('getContestProblems', req, options);
  }

  /**
   * API getContestProblemConfig.
   * @param req {Contract_Contest.IGetContestProblemConfigReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IGetContestProblemConfigResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getContestProblemConfig(req: Contract_Contest.IGetContestProblemConfigReq, options?: R): Promise<Contract_Contest.IGetContestProblemConfigResp> {
    return this.apiRequest('getContestProblemConfig', req, options);
  }

  /**
   * API setContestProblemConfig.
   * @param req {Contract_Contest.ISetContestProblemConfigReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  setContestProblemConfig(req: Contract_Contest.ISetContestProblemConfigReq, options?: R): Promise<void> {
    return this.apiRequest('setContestProblemConfig', req, options);
  }

  /**
   * API getContestUserList.
   * @param req {Contract_Contest.IGetContestUserListReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IGetContestUserListResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getContestUserList(req: Contract_Contest.IGetContestUserListReq, options?: R): Promise<Contract_Contest.IGetContestUserListResp> {
    return this.apiRequest('getContestUserList', req, options);
  }

  /**
   * API getContestUsers.
   * @param req {Contract_Contest.IGetContestUsersReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IGetContestUsersResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getContestUsers(req: Contract_Contest.IGetContestUsersReq, options?: R): Promise<Contract_Contest.IGetContestUsersResp> {
    return this.apiRequest('getContestUsers', req, options);
  }

  /**
   * API getContestUserDetail.
   * @param req {Contract_Contest.IGetContestUserDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IGetContestUserDetailResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getContestUserDetail(req: Contract_Contest.IGetContestUserDetailReq, options?: R): Promise<Contract_Contest.IGetContestUserDetailResp> {
    return this.apiRequest('getContestUserDetail', req, options);
  }

  /**
   * API createContestUser.
   * @param req {Contract_Contest.ICreateContestUserReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.ICreateContestUserResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  createContestUser(req: Contract_Contest.ICreateContestUserReq, options?: R): Promise<Contract_Contest.ICreateContestUserResp> {
    return this.apiRequest('createContestUser', req, options);
  }

  /**
   * API batchCreateContestUsers.
   * @param req {Contract_Contest.IBatchCreateContestUsersReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  batchCreateContestUsers(req: Contract_Contest.IBatchCreateContestUsersReq, options?: R): Promise<void> {
    return this.apiRequest('batchCreateContestUsers', req, options);
  }

  /**
   * API updateContestUser.
   * @param req {Contract_Contest.IUpdateContestUserReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  updateContestUser(req: Contract_Contest.IUpdateContestUserReq, options?: R): Promise<void> {
    return this.apiRequest('updateContestUser', req, options);
  }

  /**
   * API auditContestUser.
   * @param req {Contract_Contest.IAuditContestUserReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  auditContestUser(req: Contract_Contest.IAuditContestUserReq, options?: R): Promise<void> {
    return this.apiRequest('auditContestUser', req, options);
  }

  /**
   * API getContestProblemSolutionStats.
   * @param req {Contract_Contest.IGetContestProblemSolutionStatsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IGetContestProblemSolutionStatsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getContestProblemSolutionStats(req: Contract_Contest.IGetContestProblemSolutionStatsReq, options?: R): Promise<Contract_Contest.IGetContestProblemSolutionStatsResp> {
    return this.apiRequest('getContestProblemSolutionStats', req, options);
  }

  /**
   * API getContestRanklist.
   * @param req {Contract_Contest.IGetContestRanklistReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IGetContestRanklistResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getContestRanklist(req: Contract_Contest.IGetContestRanklistReq, options?: R): Promise<Contract_Contest.IGetContestRanklistResp> {
    return this.apiRequest('getContestRanklist', req, options);
  }

  /**
   * API getContestRatingStatus.
   * @param req {Contract_Contest.IGetContestRatingStatusReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Contest.IGetContestRatingStatusResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getContestRatingStatus(req: Contract_Contest.IGetContestRatingStatusReq, options?: R): Promise<Contract_Contest.IGetContestRatingStatusResp> {
    return this.apiRequest('getContestRatingStatus', req, options);
  }

  /**
   * API endContest.
   * @param req {Contract_Contest.IEndContestReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  endContest(req: Contract_Contest.IEndContestReq, options?: R): Promise<void> {
    return this.apiRequest('endContest', req, options);
  }
}
