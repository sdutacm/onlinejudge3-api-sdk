/**
 * This file was automatically generated by `@sdutacm/onlinejudge3-api-sdk`.
 */

import * as Contract_Solution from '../../common/contracts/solution';

export class ApiSolutionModule<R> {
  constructor(private readonly apiRequest: any) {}

  /**
   * API getSolutionList.
   * @param req {Contract_Solution.IGetSolutionListReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Solution.IGetSolutionListResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getSolutionList(req: Contract_Solution.IGetSolutionListReq, options?: R): Promise<Contract_Solution.IGetSolutionListResp> {
    return this.apiRequest('getSolutionList', req, options);
  }

  /**
   * API getSolutionDetail.
   * @param req {Contract_Solution.IGetSolutionDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Solution.IGetSolutionDetailResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getSolutionDetail(req: Contract_Solution.IGetSolutionDetailReq, options?: R): Promise<Contract_Solution.IGetSolutionDetailResp> {
    return this.apiRequest('getSolutionDetail', req, options);
  }

  /**
   * API batchGetSolutionDetail.
   * @param req {Contract_Solution.IBatchGetSolutionDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Solution.IBatchGetSolutionDetailResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  batchGetSolutionDetail(req: Contract_Solution.IBatchGetSolutionDetailReq, options?: R): Promise<Contract_Solution.IBatchGetSolutionDetailResp> {
    return this.apiRequest('batchGetSolutionDetail', req, options);
  }

  /**
   * API updateSolutionShare.
   * @param req {Contract_Solution.IUpdateSolutionShareReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  updateSolutionShare(req: Contract_Solution.IUpdateSolutionShareReq, options?: R): Promise<void> {
    return this.apiRequest('updateSolutionShare', req, options);
  }

  /**
   * API submitSolution.
   * @param req {Contract_Solution.ISubmitSolutionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Solution.ISubmitSolutionResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  submitSolution(req: Contract_Solution.ISubmitSolutionReq, options?: R): Promise<Contract_Solution.ISubmitSolutionResp> {
    return this.apiRequest('submitSolution', req, options);
  }

  /**
   * API rejudgeSolution.
   * @param req {Contract_Solution.IRejudgeSolutionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  rejudgeSolution(req: Contract_Solution.IRejudgeSolutionReq, options?: R): Promise<void> {
    return this.apiRequest('rejudgeSolution', req, options);
  }
}
