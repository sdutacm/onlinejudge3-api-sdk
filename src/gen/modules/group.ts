/**
 * This file was automatically generated by `@sdutacm/onlinejudge3-api-sdk`.
 */

import * as Contract_Group from '../../common/contracts/group';

export class ApiGroupModule<R> {
  constructor(private readonly apiRequest: any) {}

  /**
   * API getGroupList.
   * @param req {Contract_Group.IGetGroupListReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Group.IGetGroupListResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getGroupList(req: Contract_Group.IGetGroupListReq, options?: R): Promise<Contract_Group.IGetGroupListResp> {
    return this.apiRequest('getGroupList', req, options);
  }

  /**
   * API getGroupDetail.
   * @param req {Contract_Group.IGetGroupDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Group.IGetGroupDetailResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getGroupDetail(req: Contract_Group.IGetGroupDetailReq, options?: R): Promise<Contract_Group.IGetGroupDetailResp> {
    return this.apiRequest('getGroupDetail', req, options);
  }

  /**
   * API getUserGroups.
   * @param req {Contract_Group.IGetUserGroupsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Group.IGetUserGroupsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getUserGroups(req: Contract_Group.IGetUserGroupsReq, options?: R): Promise<Contract_Group.IGetUserGroupsResp> {
    return this.apiRequest('getUserGroups', req, options);
  }

  /**
   * API createGroup.
   * @param req {Contract_Group.ICreateGroupReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Group.ICreateGroupResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  createGroup(req: Contract_Group.ICreateGroupReq, options?: R): Promise<Contract_Group.ICreateGroupResp> {
    return this.apiRequest('createGroup', req, options);
  }

  /**
   * API createEmptyGroup.
   * @param req {Contract_Group.ICreateEmptyGroupReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Group.ICreateEmptyGroupResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  createEmptyGroup(req: Contract_Group.ICreateEmptyGroupReq, options?: R): Promise<Contract_Group.ICreateEmptyGroupResp> {
    return this.apiRequest('createEmptyGroup', req, options);
  }

  /**
   * API updateGroupDetail.
   * @param req {Contract_Group.IUpdateGroupDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  updateGroupDetail(req: Contract_Group.IUpdateGroupDetailReq, options?: R): Promise<void> {
    return this.apiRequest('updateGroupDetail', req, options);
  }

  /**
   * API deleteGroup.
   * @param req {Contract_Group.IDeleteGroupReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  deleteGroup(req: Contract_Group.IDeleteGroupReq, options?: R): Promise<void> {
    return this.apiRequest('deleteGroup', req, options);
  }

  /**
   * API getGroupMemberList.
   * @param req {Contract_Group.IGetGroupMemberListReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Group.IGetGroupMemberListResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getGroupMemberList(req: Contract_Group.IGetGroupMemberListReq, options?: R): Promise<Contract_Group.IGetGroupMemberListResp> {
    return this.apiRequest('getGroupMemberList', req, options);
  }

  /**
   * API joinGroup.
   * @param req {Contract_Group.IJoinGroupReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  joinGroup(req: Contract_Group.IJoinGroupReq, options?: R): Promise<void> {
    return this.apiRequest('joinGroup', req, options);
  }

  /**
   * API batchAddGroupMembers.
   * @param req {Contract_Group.IBatchAddGroupMembersReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  batchAddGroupMembers(req: Contract_Group.IBatchAddGroupMembersReq, options?: R): Promise<void> {
    return this.apiRequest('batchAddGroupMembers', req, options);
  }

  /**
   * API updateGroupMember.
   * @param req {Contract_Group.IUpdateGroupMemberReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  updateGroupMember(req: Contract_Group.IUpdateGroupMemberReq, options?: R): Promise<void> {
    return this.apiRequest('updateGroupMember', req, options);
  }

  /**
   * API deleteGroupMember.
   * @param req {Contract_Group.IDeleteGroupMemberReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  deleteGroupMember(req: Contract_Group.IDeleteGroupMemberReq, options?: R): Promise<void> {
    return this.apiRequest('deleteGroupMember', req, options);
  }

  /**
   * API exitGroup.
   * @param req {Contract_Group.IExitGroupReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  exitGroup(req: Contract_Group.IExitGroupReq, options?: R): Promise<void> {
    return this.apiRequest('exitGroup', req, options);
  }
}
