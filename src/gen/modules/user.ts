/**
 * This file was automatically generated by `@sdutacm/onlinejudge3-api-sdk`.
 */

import * as Contract_User from '../../common/contracts/user';

export class ApiUserModule<R> {
  constructor(private readonly apiRequest: any) {}

  /**
   * 获取当前用户 Session。如未登录，返回 null.
   * @param req {null} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetSessionResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getSession(req?: null, options?: R): Promise<Contract_User.IGetSessionResp> {
    return this.apiRequest('getSession', req, options);
  }

  /**
   * 登录.
   * @param req {Contract_User.ILoginReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.ILoginResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  login(req: Contract_User.ILoginReq, options?: R): Promise<Contract_User.ILoginResp> {
    return this.apiRequest('login', req, options);
  }

  /**
   * 登出.
   * @param req {null} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  logout(req?: null, options?: R): Promise<void> {
    return this.apiRequest('logout', req, options);
  }

  /**
   * 注册用户.
   * @param req {Contract_User.IRegisterReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IRegisterResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  register(req: Contract_User.IRegisterReq, options?: R): Promise<Contract_User.IRegisterResp> {
    return this.apiRequest('register', req, options);
  }

  /**
   * 管理员创建用户.
   * @param req {Contract_User.ICreateUserReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.ICreateUserResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  createUser(req: Contract_User.ICreateUserReq, options?: R): Promise<Contract_User.ICreateUserResp> {
    return this.apiRequest('createUser', req, options);
  }

  /**
   * 管理员批量创建用户.
   * @param req {Contract_User.IBatchCreateUsersReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  batchCreateUsers(req: Contract_User.IBatchCreateUsersReq, options?: R): Promise<void> {
    return this.apiRequest('batchCreateUsers', req, options);
  }

  /**
   * API getUserList.
   * @param req {Contract_User.IGetUserListReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetUserListResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getUserList(req: Contract_User.IGetUserListReq, options?: R): Promise<Contract_User.IGetUserListResp> {
    return this.apiRequest('getUserList', req, options);
  }

  /**
   * API getUserDetail.
   * @param req {Contract_User.IGetUserDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetUserDetailResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getUserDetail(req: Contract_User.IGetUserDetailReq, options?: R): Promise<Contract_User.IGetUserDetailResp> {
    return this.apiRequest('getUserDetail', req, options);
  }

  /**
   * API updateUserDetail.
   * @param req {Contract_User.IUpdateUserDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  updateUserDetail(req: Contract_User.IUpdateUserDetailReq, options?: R): Promise<void> {
    return this.apiRequest('updateUserDetail', req, options);
  }

  /**
   * API updateUserPassword.
   * @param req {Contract_User.IUpdateUserPasswordReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  updateUserPassword(req: Contract_User.IUpdateUserPasswordReq, options?: R): Promise<void> {
    return this.apiRequest('updateUserPassword', req, options);
  }

  /**
   * API resetUserPassword.
   * @param req {Contract_User.IResetUserPasswordReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  resetUserPassword(req: Contract_User.IResetUserPasswordReq, options?: R): Promise<void> {
    return this.apiRequest('resetUserPassword', req, options);
  }

  /**
   * API resetUserPasswordAndEmail.
   * @param req {Contract_User.IResetUserPasswordAndEmailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  resetUserPasswordAndEmail(req: Contract_User.IResetUserPasswordAndEmailReq, options?: R): Promise<void> {
    return this.apiRequest('resetUserPasswordAndEmail', req, options);
  }

  /**
   * API resetUserPasswordByAdmin.
   * @param req {Contract_User.IResetUserPasswordByAdminReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  resetUserPasswordByAdmin(req: Contract_User.IResetUserPasswordByAdminReq, options?: R): Promise<void> {
    return this.apiRequest('resetUserPasswordByAdmin', req, options);
  }

  /**
   * API updateUserEmail.
   * @param req {Contract_User.IUpdateUserEmailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  updateUserEmail(req: Contract_User.IUpdateUserEmailReq, options?: R): Promise<void> {
    return this.apiRequest('updateUserEmail', req, options);
  }

  /**
   * API uploadUserAvatar.
   * @param req {Contract_User.IUploadUserAvatarReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  uploadUserAvatar(req: Contract_User.IUploadUserAvatarReq, options?: R): Promise<void> {
    return this.apiRequest('uploadUserAvatar', req, options);
  }

  /**
   * API uploadUserBannerImage.
   * @param req {Contract_User.IUploadUserBannerImageReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  uploadUserBannerImage(req: Contract_User.IUploadUserBannerImageReq, options?: R): Promise<void> {
    return this.apiRequest('uploadUserBannerImage', req, options);
  }

  /**
   * 获取指定用户的 AC/Attempted 题目列表，可额外指定比赛 ID 筛选.
   * @param req {Contract_User.IGetUserProblemResultStatsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetUserProblemResultStatsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getUserProblemResultStats(req: Contract_User.IGetUserProblemResultStatsReq, options?: R): Promise<Contract_User.IGetUserProblemResultStatsResp> {
    return this.apiRequest('getUserProblemResultStats', req, options);
  }

  /**
   * API getUserSolutionCalendar.
   * @param req {Contract_User.IGetUserSolutionCalendarReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetUserSolutionCalendarResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getUserSolutionCalendar(req: Contract_User.IGetUserSolutionCalendarReq, options?: R): Promise<Contract_User.IGetUserSolutionCalendarResp> {
    return this.apiRequest('getUserSolutionCalendar', req, options);
  }

  /**
   * API getSessionList.
   * @param req {null} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetSessionListResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getSessionList(req?: null, options?: R): Promise<Contract_User.IGetSessionListResp> {
    return this.apiRequest('getSessionList', req, options);
  }

  /**
   * API clearSession.
   * @param req {Contract_User.IClearSessionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  clearSession(req: Contract_User.IClearSessionReq, options?: R): Promise<void> {
    return this.apiRequest('clearSession', req, options);
  }

  /**
   * API getActiveUserCount.
   * @param req {null} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetActiveUserCountResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getActiveUserCount(req?: null, options?: R): Promise<Contract_User.IGetActiveUserCountResp> {
    return this.apiRequest('getActiveUserCount', req, options);
  }

  /**
   * API getAllUserPermissionsMap.
   * @param req {null} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetAllUserPermissionsMapResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getAllUserPermissionsMap(req?: null, options?: R): Promise<Contract_User.IGetAllUserPermissionsMapResp> {
    return this.apiRequest('getAllUserPermissionsMap', req, options);
  }

  /**
   * API setUserPermissions.
   * @param req {Contract_User.ISetUserPermissionsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  setUserPermissions(req: Contract_User.ISetUserPermissionsReq, options?: R): Promise<void> {
    return this.apiRequest('setUserPermissions', req, options);
  }

  /**
   * API getSelfAchievedAchievements.
   * @param req {null} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetSelfAchievedAchievementsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getSelfAchievedAchievements(req?: null, options?: R): Promise<Contract_User.IGetSelfAchievedAchievementsResp> {
    return this.apiRequest('getSelfAchievedAchievements', req, options);
  }

  /**
   * API confirmAchievementDeliveried.
   * @param req {Contract_User.IConfirmAchievementDeliveriedReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  confirmAchievementDeliveried(req: Contract_User.IConfirmAchievementDeliveriedReq, options?: R): Promise<void> {
    return this.apiRequest('confirmAchievementDeliveried', req, options);
  }

  /**
   * API receiveAchievement.
   * @param req {Contract_User.IReceiveAchievementReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  receiveAchievement(req: Contract_User.IReceiveAchievementReq, options?: R): Promise<void> {
    return this.apiRequest('receiveAchievement', req, options);
  }

  /**
   * API getSelfOfficialMembers.
   * @param req {null} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetSelfOfficialMembersResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getSelfOfficialMembers(req?: null, options?: R): Promise<Contract_User.IGetSelfOfficialMembersResp> {
    return this.apiRequest('getSelfOfficialMembers', req, options);
  }

  /**
   * API getUserMembers.
   * @param req {Contract_User.IGetUserMembersReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetUserMembersResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getUserMembers(req: Contract_User.IGetUserMembersReq, options?: R): Promise<Contract_User.IGetUserMembersResp> {
    return this.apiRequest('getUserMembers', req, options);
  }

  /**
   * API addUserMember.
   * @param req {Contract_User.IAddUserMemberReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  addUserMember(req: Contract_User.IAddUserMemberReq, options?: R): Promise<void> {
    return this.apiRequest('addUserMember', req, options);
  }

  /**
   * API removeUserMember.
   * @param req {Contract_User.IRemoveUserMemberReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  removeUserMember(req: Contract_User.IRemoveUserMemberReq, options?: R): Promise<void> {
    return this.apiRequest('removeUserMember', req, options);
  }

  /**
   * API getSelfJoinedTeams.
   * @param req {null} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetSelfJoinedTeamsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getSelfJoinedTeams(req?: null, options?: R): Promise<Contract_User.IGetSelfJoinedTeamsResp> {
    return this.apiRequest('getSelfJoinedTeams', req, options);
  }

  /**
   * API confirmJoinTeam.
   * @param req {Contract_User.IConfirmJoinTeamReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  confirmJoinTeam(req: Contract_User.IConfirmJoinTeamReq, options?: R): Promise<void> {
    return this.apiRequest('confirmJoinTeam', req, options);
  }

  /**
   * API confirmTeamSettlement.
   * @param req {null} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  confirmTeamSettlement(req?: null, options?: R): Promise<void> {
    return this.apiRequest('confirmTeamSettlement', req, options);
  }

  /**
   * API getSelfStaticObject.
   * @param req {Contract_User.IGetSelfStaticObjectReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_User.IGetSelfStaticObjectResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getSelfStaticObject(req: Contract_User.IGetSelfStaticObjectReq, options?: R): Promise<Contract_User.IGetSelfStaticObjectResp> {
    return this.apiRequest('getSelfStaticObject', req, options);
  }
}
