/**
 * This file was automatically generated by `@sdutacm/onlinejudge3-api-sdk`.
 */

import * as Contract_Judger from '../../common/contracts/judger';

export class ApiJudgerModule<R> {
  constructor(private readonly apiRequest: any) {}

  /**
   * API getJudgerDataFile.
   * @param req {Contract_Judger.IGetJudgerDataFileReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Judger.IGetJudgerDataFileResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getJudgerDataFile(req: Contract_Judger.IGetJudgerDataFileReq, options?: R): Promise<Contract_Judger.IGetJudgerDataFileResp> {
    return this.apiRequest('getJudgerDataFile', req, options);
  }

  /**
   * API getJudgerDataArchive.
   * @param req {Contract_Judger.IGetJudgerDataArchiveReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getJudgerDataArchive(req: Contract_Judger.IGetJudgerDataArchiveReq, options?: R): Promise<void> {
    return this.apiRequest('getJudgerDataArchive', req, options);
  }

  /**
   * API prepareJudgerDataUpdate.
   * @param req {null} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  prepareJudgerDataUpdate(req?: null, options?: R): Promise<void> {
    return this.apiRequest('prepareJudgerDataUpdate', req, options);
  }

  /**
   * API uploadJudgerData.
   * @param req {Contract_Judger.IUploadJudgerDataReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  uploadJudgerData(req: Contract_Judger.IUploadJudgerDataReq, options?: R): Promise<void> {
    return this.apiRequest('uploadJudgerData', req, options);
  }

  /**
   * API getLanguageConfig.
   * @param req {null} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Judger.IGetLanguageConfigResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getLanguageConfig(req?: null, options?: R): Promise<Contract_Judger.IGetLanguageConfigResp> {
    return this.apiRequest('getLanguageConfig', req, options);
  }
}
