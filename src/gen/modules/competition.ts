/**
 * This file was automatically generated by `@sdutacm/onlinejudge3-api-sdk`.
 */

import * as Contract_Competition from '../../common/contracts/competition';

export class ApiCompetitionModule<R> {
  constructor(private readonly apiRequest: any) {}

  /**
   * API getCompetitionList.
   * @param req {Contract_Competition.IGetCompetitionListReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionListResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionList(req: Contract_Competition.IGetCompetitionListReq, options?: R): Promise<Contract_Competition.IGetCompetitionListResp> {
    return this.apiRequest('getCompetitionList', req, options);
  }

  /**
   * 获取指定比赛 Session。如可通过全局 Session 自动换取比赛 Session，则自动登录，否则返回 null.
   * @param req {Contract_Competition.IGetCompetitionSessionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionSessionResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionSession(req: Contract_Competition.IGetCompetitionSessionReq, options?: R): Promise<Contract_Competition.IGetCompetitionSessionResp> {
    return this.apiRequest('getCompetitionSession', req, options);
  }

  /**
   * 登录指定比赛.
   * @param req {Contract_Competition.ILoginCompetitionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.ILoginCompetitionResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  loginCompetition(req: Contract_Competition.ILoginCompetitionReq, options?: R): Promise<Contract_Competition.ILoginCompetitionResp> {
    return this.apiRequest('loginCompetition', req, options);
  }

  /**
   * 登出指定比赛.
   * @param req {Contract_Competition.ILogoutCompetitionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  logoutCompetition(req: Contract_Competition.ILogoutCompetitionReq, options?: R): Promise<void> {
    return this.apiRequest('logoutCompetition', req, options);
  }

  /**
   * 获取指定比赛详情.
   * @param req {Contract_Competition.IGetCompetitionDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionDetailResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionDetail(req: Contract_Competition.IGetCompetitionDetailReq, options?: R): Promise<Contract_Competition.IGetCompetitionDetailResp> {
    return this.apiRequest('getCompetitionDetail', req, options);
  }

  /**
   * 获取指定比赛题目列表.
   * @param req {Contract_Competition.IGetCompetitionProblemsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionProblemsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionProblems(req: Contract_Competition.IGetCompetitionProblemsReq, options?: R): Promise<Contract_Competition.IGetCompetitionProblemsResp> {
    return this.apiRequest('getCompetitionProblems', req, options);
  }

  /**
   * API createCompetition.
   * @param req {Contract_Competition.ICreateCompetitionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.ICreateCompetitionResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  createCompetition(req: Contract_Competition.ICreateCompetitionReq, options?: R): Promise<Contract_Competition.ICreateCompetitionResp> {
    return this.apiRequest('createCompetition', req, options);
  }

  /**
   * API updateCompetitionDetail.
   * @param req {Contract_Competition.IUpdateCompetitionDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  updateCompetitionDetail(req: Contract_Competition.IUpdateCompetitionDetailReq, options?: R): Promise<void> {
    return this.apiRequest('updateCompetitionDetail', req, options);
  }

  /**
   * 获取指定比赛题目配置。需要裁判或更高权限.
   * @param req {Contract_Competition.IGetCompetitionProblemConfigReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionProblemConfigResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionProblemConfig(req: Contract_Competition.IGetCompetitionProblemConfigReq, options?: R): Promise<Contract_Competition.IGetCompetitionProblemConfigResp> {
    return this.apiRequest('getCompetitionProblemConfig', req, options);
  }

  /**
   * 更新指定比赛题目配置。需要负责人或更高权限.
   * @param req {Contract_Competition.ISetCompetitionProblemConfigReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  setCompetitionProblemConfig(req: Contract_Competition.ISetCompetitionProblemConfigReq, options?: R): Promise<void> {
    return this.apiRequest('setCompetitionProblemConfig', req, options);
  }

  /**
   * API batchCreateCompetitionUsers.
   * @param req {Contract_Competition.IBatchCreateCompetitionUsersReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  batchCreateCompetitionUsers(req: Contract_Competition.IBatchCreateCompetitionUsersReq, options?: R): Promise<void> {
    return this.apiRequest('batchCreateCompetitionUsers', req, options);
  }

  /**
   * API createCompetitionUser.
   * @param req {Contract_Competition.ICreateCompetitionUserReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  createCompetitionUser(req: Contract_Competition.ICreateCompetitionUserReq, options?: R): Promise<void> {
    return this.apiRequest('createCompetitionUser', req, options);
  }

  /**
   * API updateCompetitionUser.
   * @param req {Contract_Competition.IUpdateCompetitionUserReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  updateCompetitionUser(req: Contract_Competition.IUpdateCompetitionUserReq, options?: R): Promise<void> {
    return this.apiRequest('updateCompetitionUser', req, options);
  }

  /**
   * 获取指定比赛全部用户（包括各种状态）。需要审核员、负责人或更高权限.
   * @param req {Contract_Competition.IGetCompetitionUsersReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionUsersResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionUsers(req: Contract_Competition.IGetCompetitionUsersReq, options?: R): Promise<Contract_Competition.IGetCompetitionUsersResp> {
    return this.apiRequest('getCompetitionUsers', req, options);
  }

  /**
   * API getCompetitionUserDetail.
   * @param req {Contract_Competition.IGetCompetitionUserDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionUserDetailResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionUserDetail(req: Contract_Competition.IGetCompetitionUserDetailReq, options?: R): Promise<Contract_Competition.IGetCompetitionUserDetailResp> {
    return this.apiRequest('getCompetitionUserDetail', req, options);
  }

  /**
   * API getSelfCompetitionUserDetail.
   * @param req {Contract_Competition.IGetSelfCompetitionUserDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetSelfCompetitionUserDetailResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getSelfCompetitionUserDetail(req: Contract_Competition.IGetSelfCompetitionUserDetailReq, options?: R): Promise<Contract_Competition.IGetSelfCompetitionUserDetailResp> {
    return this.apiRequest('getSelfCompetitionUserDetail', req, options);
  }

  /**
   * 获取指定比赛的所有有效参赛者列表.
   * @param req {Contract_Competition.IGetPublicCompetitionParticipantsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetPublicCompetitionParticipantsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getPublicCompetitionParticipants(req: Contract_Competition.IGetPublicCompetitionParticipantsReq, options?: R): Promise<Contract_Competition.IGetPublicCompetitionParticipantsResp> {
    return this.apiRequest('getPublicCompetitionParticipants', req, options);
  }

  /**
   * 获取指定比赛中指定有效参赛者的详情.
   * @param req {Contract_Competition.IGetPublicCompetitionParticipantDetailReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetPublicCompetitionParticipantDetailResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getPublicCompetitionParticipantDetail(req: Contract_Competition.IGetPublicCompetitionParticipantDetailReq, options?: R): Promise<Contract_Competition.IGetPublicCompetitionParticipantDetailResp> {
    return this.apiRequest('getPublicCompetitionParticipantDetail', req, options);
  }

  /**
   * 获取指定比赛中指定参赛者的新随机登录密码。需要场地协助或管理员权限.
   * @param req {Contract_Competition.IRequestCompetitionParticipantPasswordReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IRequestCompetitionParticipantPasswordResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  requestCompetitionParticipantPassword(req: Contract_Competition.IRequestCompetitionParticipantPasswordReq, options?: R): Promise<Contract_Competition.IRequestCompetitionParticipantPasswordResp> {
    return this.apiRequest('requestCompetitionParticipantPassword', req, options);
  }

  /**
   * API randomAllCompetitionUserPasswords.
   * @param req {Contract_Competition.IRandomAllCompetitionUserPasswordsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  randomAllCompetitionUserPasswords(req: Contract_Competition.IRandomAllCompetitionUserPasswordsReq, options?: R): Promise<void> {
    return this.apiRequest('randomAllCompetitionUserPasswords', req, options);
  }

  /**
   * 获取指定比赛中自己作为参赛者的注册信息。如未注册，返回 null.
   * @param req {Contract_Competition.IGetSignedUpCompetitionParticipantReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetSignedUpCompetitionParticipantResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getSignedUpCompetitionParticipant(req: Contract_Competition.IGetSignedUpCompetitionParticipantReq, options?: R): Promise<Contract_Competition.IGetSignedUpCompetitionParticipantResp> {
    return this.apiRequest('getSignedUpCompetitionParticipant', req, options);
  }

  /**
   * 注册参赛到指定比赛.
   * @param req {Contract_Competition.ISignUpCompetitionParticipantReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  signUpCompetitionParticipant(req: Contract_Competition.ISignUpCompetitionParticipantReq, options?: R): Promise<void> {
    return this.apiRequest('signUpCompetitionParticipant', req, options);
  }

  /**
   * 修改指定比赛中自己作为参赛者的注册信息.
   * @param req {Contract_Competition.IModifySignedUpCompetitionParticipantReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  modifySignedUpCompetitionParticipant(req: Contract_Competition.IModifySignedUpCompetitionParticipantReq, options?: R): Promise<void> {
    return this.apiRequest('modifySignedUpCompetitionParticipant', req, options);
  }

  /**
   * 删除指定比赛中自己作为参赛者的注册信息.
   * @param req {Contract_Competition.IDeleteSignedUpCompetitionParticipantReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  deleteSignedUpCompetitionParticipant(req: Contract_Competition.IDeleteSignedUpCompetitionParticipantReq, options?: R): Promise<void> {
    return this.apiRequest('deleteSignedUpCompetitionParticipant', req, options);
  }

  /**
   * API auditCompetitionParticipant.
   * @param req {Contract_Competition.IAuditCompetitionParticipantReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  auditCompetitionParticipant(req: Contract_Competition.IAuditCompetitionParticipantReq, options?: R): Promise<void> {
    return this.apiRequest('auditCompetitionParticipant', req, options);
  }

  /**
   * 确认进入指定比赛。仅有效参赛者自身可用.
   * @param req {Contract_Competition.IConfirmEnterCompetitionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  confirmEnterCompetition(req: Contract_Competition.IConfirmEnterCompetitionReq, options?: R): Promise<void> {
    return this.apiRequest('confirmEnterCompetition', req, options);
  }

  /**
   * 确认签退指定比赛。仅有效参赛者自身可用.
   * @param req {Contract_Competition.IConfirmQuitCompetitionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  confirmQuitCompetition(req: Contract_Competition.IConfirmQuitCompetitionReq, options?: R): Promise<void> {
    return this.apiRequest('confirmQuitCompetition', req, options);
  }

  /**
   * 获取指定比赛的题目提交统计，包含每道题目的 AC/Submitted 计数.
   * @param req {Contract_Competition.IGetCompetitionProblemSolutionStatsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionProblemSolutionStatsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionProblemSolutionStats(req: Contract_Competition.IGetCompetitionProblemSolutionStatsReq, options?: R): Promise<Contract_Competition.IGetCompetitionProblemSolutionStatsResp> {
    return this.apiRequest('getCompetitionProblemSolutionStats', req, options);
  }

  /**
   * API getCompetitionSettings.
   * @param req {Contract_Competition.IGetCompetitionSettingsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionSettingsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionSettings(req: Contract_Competition.IGetCompetitionSettingsReq, options?: R): Promise<Contract_Competition.IGetCompetitionSettingsResp> {
    return this.apiRequest('getCompetitionSettings', req, options);
  }

  /**
   * API updateCompetitionSettings.
   * @param req {Contract_Competition.IUpdateCompetitionSettingsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  updateCompetitionSettings(req: Contract_Competition.IUpdateCompetitionSettingsReq, options?: R): Promise<void> {
    return this.apiRequest('updateCompetitionSettings', req, options);
  }

  /**
   * API getCompetitionNotifications.
   * @param req {Contract_Competition.IGetCompetitionNotificationsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionNotificationsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionNotifications(req: Contract_Competition.IGetCompetitionNotificationsReq, options?: R): Promise<Contract_Competition.IGetCompetitionNotificationsResp> {
    return this.apiRequest('getCompetitionNotifications', req, options);
  }

  /**
   * API createCompetitionNotification.
   * @param req {Contract_Competition.ICreateCompetitionNotificationReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  createCompetitionNotification(req: Contract_Competition.ICreateCompetitionNotificationReq, options?: R): Promise<void> {
    return this.apiRequest('createCompetitionNotification', req, options);
  }

  /**
   * API deleteCompetitionNotification.
   * @param req {Contract_Competition.IDeleteCompetitionNotificationReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  deleteCompetitionNotification(req: Contract_Competition.IDeleteCompetitionNotificationReq, options?: R): Promise<void> {
    return this.apiRequest('deleteCompetitionNotification', req, options);
  }

  /**
   * API getCompetitionQuestions.
   * @param req {Contract_Competition.IGetCompetitionQuestionsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionQuestionsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionQuestions(req: Contract_Competition.IGetCompetitionQuestionsReq, options?: R): Promise<Contract_Competition.IGetCompetitionQuestionsResp> {
    return this.apiRequest('getCompetitionQuestions', req, options);
  }

  /**
   * API getSelfCompetitionQuestions.
   * @param req {Contract_Competition.IGetSelfCompetitionQuestionsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetSelfCompetitionQuestionsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getSelfCompetitionQuestions(req: Contract_Competition.IGetSelfCompetitionQuestionsReq, options?: R): Promise<Contract_Competition.IGetSelfCompetitionQuestionsResp> {
    return this.apiRequest('getSelfCompetitionQuestions', req, options);
  }

  /**
   * API createCompetitionQuestion.
   * @param req {Contract_Competition.ICreateCompetitionQuestionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  createCompetitionQuestion(req: Contract_Competition.ICreateCompetitionQuestionReq, options?: R): Promise<void> {
    return this.apiRequest('createCompetitionQuestion', req, options);
  }

  /**
   * API replyCompetitionQuestion.
   * @param req {Contract_Competition.IReplyCompetitionQuestionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  replyCompetitionQuestion(req: Contract_Competition.IReplyCompetitionQuestionReq, options?: R): Promise<void> {
    return this.apiRequest('replyCompetitionQuestion', req, options);
  }

  /**
   * 触发指定比赛结算。需要负责人或更高权限.
   * @param req {Contract_Competition.IEndCompetitionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  endCompetition(req: Contract_Competition.IEndCompetitionReq, options?: R): Promise<void> {
    return this.apiRequest('endCompetition', req, options);
  }

  /**
   * 回滚指定比赛结算。需要负责人或更高权限.
   * @param req {Contract_Competition.ICancelEndCompetitionReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  cancelEndCompetition(req: Contract_Competition.ICancelEndCompetitionReq, options?: R): Promise<void> {
    return this.apiRequest('cancelEndCompetition', req, options);
  }

  /**
   * API getCompetitionRanklist.
   * @param req {Contract_Competition.IGetCompetitionRanklistReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionRanklistResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionRanklist(req: Contract_Competition.IGetCompetitionRanklistReq, options?: R): Promise<Contract_Competition.IGetCompetitionRanklistResp> {
    return this.apiRequest('getCompetitionRanklist', req, options);
  }

  /**
   * API getCompetitionRatingStatus.
   * @param req {Contract_Competition.IGetCompetitionRatingStatusReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionRatingStatusResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionRatingStatus(req: Contract_Competition.IGetCompetitionRatingStatusReq, options?: R): Promise<Contract_Competition.IGetCompetitionRatingStatusResp> {
    return this.apiRequest('getCompetitionRatingStatus', req, options);
  }

  /**
   * API getAllCompetitionSolutionsForSrkLite.
   * @param req {Contract_Competition.IGetAllCompetitionSolutionsForSrkLiteReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getAllCompetitionSolutionsForSrkLite(req: Contract_Competition.IGetAllCompetitionSolutionsForSrkLiteReq, options?: R): Promise<void> {
    return this.apiRequest('getAllCompetitionSolutionsForSrkLite', req, options);
  }

  /**
   * API getCompetitionSpGenshinExplorationUnlockRecords.
   * @param req {Contract_Competition.IGetCompetitionSpGenshinExplorationUnlockRecordsReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<Contract_Competition.IGetCompetitionSpGenshinExplorationUnlockRecordsResp>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  getCompetitionSpGenshinExplorationUnlockRecords(req: Contract_Competition.IGetCompetitionSpGenshinExplorationUnlockRecordsReq, options?: R): Promise<Contract_Competition.IGetCompetitionSpGenshinExplorationUnlockRecordsResp> {
    return this.apiRequest('getCompetitionSpGenshinExplorationUnlockRecords', req, options);
  }

  /**
   * API doCompetitionSpGenshinExplorationUnlock.
   * @param req {Contract_Competition.IDoCompetitionSpGenshinExplorationUnlockReq} The request data.
   * @param options {R} Extra request options.
   * @returns {Promise<void>} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  doCompetitionSpGenshinExplorationUnlock(req: Contract_Competition.IDoCompetitionSpGenshinExplorationUnlockReq, options?: R): Promise<void> {
    return this.apiRequest('doCompetitionSpGenshinExplorationUnlock', req, options);
  }
}
