#!/usr/bin/env -S npx tsx

import path from 'path';
import fs from 'fs-extra';
import { routeBeModules } from '../src/common/routes/be.route';

const targetDir = path.join(__dirname, '../src/gen/');
const targetModuleDir = path.join(targetDir, 'modules');
fs.removeSync(targetDir);
fs.ensureDirSync(targetModuleDir);

const modules = [] as string[];
const uniqContractSet = new Set<string>();

function upper(str: string) {
  return str.substr(0, 1).toUpperCase() + str.substr(1);
}

for (const { module, routes } of routeBeModules) {
  modules.push(module);
  const targetGenFilePath = path.join(targetModuleDir, `${module}.ts`);
  const contractSet = new Set<string>();
  const routesGen = [] as string[];

  for (const route of routes) {
    if (route.private) {
      continue;
    }
    const { i, method, url, description, contract } = route;
    const { req, resp } = contract;
    const reqContractModule = req ? req.split('.')[0] : null;
    const reqContractName = req ? req.split('.')[1] : null;
    const respContractModule = resp ? resp.split('.')[0] : null;
    const respContractName = resp ? resp.split('.')[1] : null;
    const reqContractImportName = reqContractModule ? `Contract_${upper(reqContractModule)}` : null;
    const respContractImportName = respContractModule
      ? `Contract_${upper(respContractModule)}`
      : null;
    reqContractModule && contractSet.add(reqContractModule);
    respContractModule && contractSet.add(respContractModule);

    const routeContent = `/**
   * ${description || `API ${i}`}.
   * @param req {${
     reqContractName ? `${reqContractImportName}.I${upper(reqContractName)}` : 'null'
   }} The request data.
   * @param options {R} Extra request options.
   * @returns {${
     respContractName
       ? `Promise<${respContractImportName}.I${upper(respContractName)}>`
       : 'Promise<void>'
   }} The response data.
   * @throws {ApiException} If the API call fails.
   * @throws {HttpException} If the HTTP request fails.
   * @throws {Error} If unknown error occurs.
   */
  ${i}(${
      reqContractName ? `req: ${reqContractImportName}.I${upper(reqContractName)}` : 'req?: null'
    }, options?: R): Promise<${
      respContractName ? `${respContractImportName}.I${upper(respContractName)}` : 'void'
    }> {
    return this.apiRequest('${i}', req, options);
  }`;
    routesGen.push(routeContent);
  }

  const importContent = Array.from(contractSet)
    .map((contract) => {
      return `import * as Contract_${upper(contract)} from '../../common/contracts/${contract}';`;
    })
    .join('\n');

  const moduleContent = `/**
 * This file was automatically generated by \`@sdutacm/onlinejudge3-api-sdk\`.
 */

${importContent}

export class Api${upper(module)}Module<R> {
  constructor(private readonly apiRequest: any) {}

  ${routesGen.join('\n\n  ')}
}
`;

  fs.writeFileSync(targetGenFilePath, moduleContent);
  console.log(`Generated ${targetGenFilePath}`);
  Array.from(contractSet).forEach((c) => uniqContractSet.add(c));
}

// Generate index.ts
const indexFilePath = path.join(targetDir, 'index.ts');
const indexContent = `/**
 * This file was automatically generated by \`@sdutacm/onlinejudge3-api-sdk\`.
 */

${modules
  .map((module) => `import { Api${upper(module)}Module } from './modules/${module}';`)
  .join('\n')}

export class ApiIndex<R> {
  ${modules.map((module) => `${module}: Api${upper(module)}Module<R>;`).join('\n  ')}

  init(apiRequest: any) {
    ${modules
      .map((module) => `this.${module} = new Api${upper(module)}Module(apiRequest);`)
      .join('\n    ')}
  }
}

${Array.from(uniqContractSet)
  .map(
    (contract) => `export * as Contract_${upper(contract)} from '../common/contracts/${contract}';`,
  )
  .join('\n')}
`;
fs.writeFileSync(indexFilePath, indexContent);
console.log(`Generated ${indexFilePath}`);

console.log('Done');
